import AppHelper from 'helpers/AppHelper'
import RuneHelper from 'helpers/RuneHelper'
import AuthHelper from 'helpers/AuthHelper'

import PosType from 'utils/constants/PosType'
import SetType from 'utils/constants/SetType'
import StatType from 'utils/constants/StatType'


import {Utils, BaseData}  from 'ap-react-bootstrap'

let SORT_ATTRIBUTE = {
    star: 'star',
    lvl: 'lvl'
}

let GROW_THRESHOLD = 50

/* This class was auto-generated by the JavaScriptWriter */
class RunesData extends BaseData {

	register(obj) {

        if(!AuthHelper.getEntityId()) {
            AppHelper.navigate("/")
        }
        
		super.register(obj)

        this.obj.onClickSetFilter = this.onClickSetFilter.bind(this)
        this.obj.onClickRuneStar = this.onClickRuneStar.bind(this)
        this.obj.onClickSort = this.onClickSort.bind(this)
        this.obj.onChangeMainStatFilter = this.onChangeMainStatFilter.bind(this)
        this.obj.onClickSubStatFilter = this.onClickSubStatFilter.bind(this)

        this.obj.onScroll = this.onScroll.bind(this)

        this.sortsFilter = {}
        this.hasSortsFilter = false
        this.setFilter = {}
        this.hasSetFilter = false
        this.posFilter = {}
        this.hasPosFilter = false
        this.mainStatFilter = "All"
        this.hasMainStatFilter = false
        this.subStatFilter = {}
        this.hasSubStatFilter = false

        this.statTypeValues = []
        this.statTypeValues.push('All')
        for(var i = 0; i < StatType.VALUES.length; i++) {
            this.statTypeValues.push(StatType.VALUES[i].key)
        }

        this.obj.state = {
            runes: [],
            threshold: GROW_THRESHOLD,
            statTypeValues: this.statTypeValues,
            setFilter: this.setFilter,
            subStatFilter : this.subStatFilter
        }

        this.buildDataRunes()		
	}
	unregister() {
	}

    buildDataRunes() {
        let runes = Utils.map(RuneHelper.getData())
        this.setState({runes: runes})
    }

    checkFilters(key) {
        let UpperKey = key[0].toUpperCase() + key.slice(1);
        this['has' + UpperKey + 'Filter'] = false
        for (let item in this[key + 'Filter']) {
            if (this[key + 'Filter'].hasOwnProperty(item)) {
                if (this[key + 'Filter'][item]) {
                    this['has' + UpperKey + 'Filter'] = true
                    break;
                }
            }
        }
    }

    checkFiltersAndSorts() {
        console.log("FILTER RUNES FILTER RUNES FILTER RUNES FILTER RUNES FILTER RUNES ")
        console.log(this.subStatFilter)

        this.checkFilters('set')
        this.checkFilters('pos')
        this.checkFilters('subStat')
        this.checkFilters('sorts')

        this.hasMainStatFilter = false
        if (this.mainStatFilter != 'All')
            this.hasMainStatFilter = true

        let runes = Utils.map(RuneHelper.getData())

        if(this.hasSetFilter || this.hasPosFilter || this.hasMainStatFilter || this.hasSubStatFilter) {
            runes = runes.filter(this._filterRune.bind(this))
        }

        if(this.hasSortsFilter)
            runes = runes.sort(this._sortRunes.bind(this))

        return runes
    }

	onClickSetFilter(key) {
        if(this.setFilter.hasOwnProperty(key))
            delete this.setFilter[key]
        else
            this.setFilter[key] = key

        let runes = this.checkFiltersAndSorts()
        
        this.setState({
            threshold: GROW_THRESHOLD,
            runes: runes, 
            setFilter: this.setFilter
        }) 
	}

    onClickRuneStar(key, value) {
        this.posFilter[key] = value

        let runes = this.checkFiltersAndSorts()

        this.setState({
            threshold: GROW_THRESHOLD,
            runes: runes, 
            posFilter: this.posFilter
        })
    }

    onChangeMainStatFilter(event) {
        this.mainStatFilter = event.target.value

        let runes = this.checkFiltersAndSorts()

        this.setState({
            threshold: GROW_THRESHOLD,
            runes: runes, 
            mainStatFilter: this.mainStatFilter
        })
    }

    onClickSubStatFilter(key) {
        if(this.subStatFilter.hasOwnProperty(key))
            delete this.subStatFilter[key]
        else
            this.subStatFilter[key] = key

        let runes = this.checkFiltersAndSorts()

        this.setState({
            threshold: GROW_THRESHOLD,
            runes: runes, 
            subStatFilter: this.subStatFilter
        })
    }

    onClickSort(key) {
        this.sortsFilter[key] = !this.sortsFilter[key]

        let runes = this.checkFiltersAndSorts()

        this.setState({
            threshold: GROW_THRESHOLD,
            runes: runes,
            sorts: this.sortsFilter
        })
    }

    onScroll() {
        let oH = this.obj.refs.list.offsetHeight
        let sH = this.obj.refs.list.scrollHeight
        let sT = this.obj.refs.list.scrollTop
        if (sT + oH >= sH - 1) {
            clearTimeout(this.growTimeout)
            this.growTimeout = setTimeout(this.setState.bind(this, {
                threshold: this.getState('threshold') + GROW_THRESHOLD
            }), 250)
        }
    }

    _sortRunes(r1, r2) {
        let sortAtts = Object.keys(SORT_ATTRIBUTE)
        for (let i = 0; i < sortAtts.length; i++) {
            let sortAtt = sortAtts[i]
            if (this.sortsFilter[sortAtt]) {
                let s = r2[sortAtt] - r1[sortAtt]
                if (s) return s    
            }
        }
    }

    _runeHaveStatType(rune, subStats) {
        for (let key in subStats) {
            if(subStats[key] == rune.subStatType)
                continue
            if(subStats[key] == rune.stat1Type)
                continue
            if(subStats[key] == rune.stat2Type)
                continue
            if(subStats[key] == rune.stat3Type)
                continue
            if(subStats[key] == rune.stat4Type)
                continue
            return false
        }
        return true
    }

    _filterRune(rune) {
        if (this.hasSetFilter && !this.setFilter[rune.set]) {
            return false
        }
        if (this.hasPosFilter && !this.posFilter[rune.pos]) {
            return false
        }
        if (this.hasMainStatFilter && rune.statMainType != this.mainStatFilter) {
            return false
        }
        if (this.hasSubStatFilter && !this._runeHaveStatType(rune, this.subStatFilter)) {
            return false
        }
        return true
    }

}
var RunesObj = new RunesData()
RunesObj.SORT_ATTRIBUTE = SORT_ATTRIBUTE
export default RunesObj

