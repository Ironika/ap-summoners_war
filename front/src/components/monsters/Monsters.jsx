import React from 'react';
import MonstersData from 'components/monsters/MonstersData';
import {Rater, Utils}  from 'ap-react-bootstrap';
import Monster from 'components/lib/monster/Monster';
import MonsterInfos from 'components/lib/monsterInfos/MonsterInfos';
import MonsterRunes from 'components/lib/monsterRunes/MonsterRunes';
import './Monsters.scss';

/* This class was auto-generated by the JavaScriptWriter */
class Monsters extends React.Component {

    constructor(props) {
        super(props);
    }

    componentWillMount() {
        MonstersData.register(this)
    }

    componentWillUnmount() {
        MonstersData.unregister()
    }

    _buildMonster(monster) { return (
        <Monster 
            key={monster.id} 
            monster={monster} 
            active={monster.id === (this.state.monster || {}).id} 
            onClick={this.onClickMonster}/>
    )}

    _buildMonsterInfos(id) {
        if(id === "infos" )
            return (<MonsterInfos monster={this.state.monster}/>)
        else
            return (<MonsterRunes monster={this.state.monster}/>)
    }

    _buildElementFilters(key) {
        return (
            <div key={key} onClick={this.onClickElementFilters.bind(this, key)} className={this.state.elementFilter === key ? "sm-monster-filters-element sm-monster-filters-element-active" : "sm-monster-filters-element"}>
                <img src={"assets/images/elements/" + key + ".png"}/>
            </div>
        )
    }

    _buildSorts(sort, key) {
        return (
            <li key={key}>
                <label className="sm-label">{key}</label>
                <input className="sm-checkbox" type="checkbox" onClick={this.onClickSort.bind(this, key)}/>
            </li>
        )
    }

    render() { return (
        <div className='ap-monsters'>
            <div className="row">
                <div className="col-md-6">
                    <div className="sm-sheet sm-monster-filters-elements">
                        {Utils.map(MonstersData.FILTER_ELEMENT, this._buildElementFilters.bind(this))}
                    </div>
                    <div className="sm-sheet sm-monster-search">
                        <input className="sm-search-input" placeholder='Search' value={this.state.search} onChange={this.onSearch}/>
                    </div>
                    <div className="sm-sheet sm-monster-list">
                        {this.state.monsters.filter(this.filterMonsters).sort(this.sortMonsters).map(this._buildMonster.bind(this))}
                    </div>
                </div>
                <div className="col-md-6">
                    <div className="sm-sheet">
                        <div className={"sm-monster-tab " + (this.state.currentPage === 'infos' ? 'sm-monster-tab-active' : "")} onClick={this.onClickInfos}>Infos</div>
                        <div className={"sm-monster-tab sm-monster-mid "+ (this.state.currentPage === 'runes' ? 'sm-monster-tab-active' : "")} onClick={this.onClickRunes}>Runes</div>
                        { this._buildMonsterInfos(this.state.currentPage) }
                    </div>
                    <div className="sm-sheet sm-monster-filters-top">
                        <ul className="sm-monster-filters">
                            {Utils.map(MonstersData.SORT_ATTRIBUTE, this._buildSorts.bind(this))}
                        </ul>
                    </div>                    
                </div>
            </div>
        </div>
    )}
    /*
        
                
    */

}
export default Monsters;
