import React from 'react';
import MonsterConfigData from 'components-lib/monsterConfig/MonsterConfigData';

import {Utils, FormSelect}  from 'ap-react-bootstrap'
import AppHelper from 'helpers/AppHelper'

import './MonsterConfig.scss';

/* This class was auto-generated by the JavaScriptWriter */
class MonsterConfig extends React.Component {

	constructor(props) {
		super(props);
		this.MonsterConfigDataObj = new MonsterConfigData();
	}

	componentWillMount() {
		this.MonsterConfigDataObj.register(this)
	}

	componentWillUnmount() {
		this.MonsterConfigDataObj.unregister()
	}

	componentWillReceiveProps(nextProps) {
		this.MonsterConfigDataObj.update(nextProps)
	}

	_buildStat(id, stat, key) {
		if(id == "sets")
			var statName = stat			
		else	
			var statName = key + " : " + stat
			
		return (
			<li key={key}>
				<span>{statName}</span>
				<i className="glyphicon glyphicon-remove" onClick={this.onClickDeleteStat.bind(this, id, key)}></i>
			</li>
		)
	}

	_buildBrokenSet() {
		if(this.state.monsterConfig.brokenSet)
			return ( <input id="brokenSet" type="checkbox" className="sm-checkbox" onChange={this.onChangeBrokenSet.bind(this)} checked/>)
		else
			return ( <input id="brokenSet" type="checkbox" className="sm-checkbox" onChange={this.onChangeBrokenSet.bind(this)}/>)
	}

	buildImg(monster){
		let storage = "(In Storage)"
		let element = "(" + monster.elemType + ")"

		let name = monster.name

		if(name.search("Unknow") != -1) {
			return (<img className="sm-monster-image" src={"assets/images/monsters/default-monster.jpg"}/>)
		}

		if(name.search(storage) != -1) {
			name = name.slice(0 , name.search(storage) - 2)
		}

		if(name.search(element) != -1) {
			name = name.slice(0 , name.search(element) - 2)
			name = name + "_" + monster.elemType
		}

		while(name.search(" ") != -1)
			name = name.replace(" ", "-")


		return (<img className="sm-monster-image" src={"assets/images/monsters/" + name + ".jpg"} alt={"summonerswar-builder-monster " + name}/>)
	}

	_buildMonsterList(monster) {
		return (
			<div className="sm-list-monster" key={monster.id} onClick={this.onClickMonster.bind(this, monster)}>
				{this.buildImg(monster)}
				<span>{monster.name}</span>
			</div>
		)
	}

	render() {
		return (
			<div className={"sm-build-buildmonsterconfig sm-content sm-build-content " + (this.state.isExpanded ? "sm-build-buildmonsterconfig-expanded" : "")}>
				<i className="glyphicon glyphicon-remove sm-build-buildmonsterconfig-delete" onClick={this.props.onClick.bind(this, this.state.monsterConfig)}></i>
				<div className="sm-order-attack">
					<input className="sm-input" type="number" value={this.state.monsterConfig.orderAtk} onChange={this.onChangeOrderAtk.bind(this)}/>
					<i className="glyphicon glyphicon-question-sign sm-monsterconfig-infos"></i>
					<div className="sm-monsterconfig-infos-content">
						Order priority attack.
						<br/>
						1 by default.
					</div>
				</div>
				<div className="sm-builds-monster-name">
					<img alt="Summoners War" src={"assets/images/monsters/" + this.state.monsterImage + ".jpg"}/>
					<div className="sm-list-monsters">
						<input className="sm-input" type="text" placeholder="Monster Name..." value={this.state.monsterName} onChange={this.onChangeMonsterName.bind(this)}/>
						<div className={"sm-list-monster-input " + (this.state.monstersListShow ? "" : "sm-hide")}>
							{Utils.map(this.state.monstersList, this._buildMonsterList.bind(this))}
						</div>
					</div>
				</div>
				<hr/>
				<div className="sm-builds-monster-stats">
					<label className="sm-label" onClick={this.onClickShow.bind(this, 'requiredStats')}>Required Stats</label>
					<i className="glyphicon glyphicon-question-sign sm-monsterconfig-infos"></i>
					<div className="sm-monsterconfig-infos-content">
						Something like : <br/>
						Hp : 20000 <br/>
						Atk : 150 <br/>
						...
					</div>
					<div className={"sm-builds-monster-stats-box " + (this.state.requiredStatsIsOpen ? "" : "sm-hide")}>
						<FormSelect values={this.state.statTypeValues} className={'sm-input sm-builds-select'} onChange={this.onChangeSelect.bind(this, 'requiredStats')}/>
						<input type="number" className="sm-input" onChange={this.onChangeInput.bind(this, 'requiredStats')}/>
						<button className="sm-button" onClick={this.onClickSubmit.bind(this, 'requiredStats')}>Ok</button>
						<div className={"sm-stats-content " + (Object.keys(this.state.requiredStats).length > 0 ? "" : "sm-hide")}>
							<ul>
								{Utils.map(this.state.requiredStats, this._buildStat.bind(this, 'requiredStats'))}
							</ul>
						</div>
					</div>
				</div>
				<hr/>
				<div className="sm-builds-monster-stats">
					<label className="sm-label" onClick={this.onClickShow.bind(this, 'notationStats')}>Notations Stats</label>
					<i className="glyphicon glyphicon-question-sign sm-monsterconfig-infos"></i>
					<div className="sm-monsterconfig-infos-content">
						Notation is between 0 - 5 <br/>
						Something like : <br/>
						Spd : 5 <br/>
						Atk : 4 <br/>
						...
					</div>
					<div className={"sm-builds-monster-stats-box " + (this.state.notationStatsIsOpen ? "" : "sm-hide")}>
						<FormSelect values={this.state.statTypeValues} className={'sm-input sm-builds-select'} onChange={this.onChangeSelect.bind(this, 'notationStats')}/>
						<input className="sm-range" type="range" onInput={this.onInputNotation.bind(this)} min="0" max="5" defaultValue="0" onChange={this.onChangeInput.bind(this, 'notationStats')}/>
						<div className="sm-range-infos">{this.state.notationStatsInput}</div>
						<button className="sm-button" onClick={this.onClickSubmit.bind(this, 'notationStats')}>Ok</button>
						<div className={"sm-stats-content " + (Object.keys(this.state.notationStats).length > 0  ? "" : "sm-hide")}>
							<ul>
								{Utils.map(this.state.notationStats, this._buildStat.bind(this, 'notationStats'))}
							</ul>
						</div>
					</div>
				</div>
				<hr/>
				<div className="sm-builds-monster-stats">
					<label className="sm-label" onClick={this.onClickShow.bind(this, 'sets')}>Sets</label>
					<i className="glyphicon glyphicon-question-sign sm-monsterconfig-infos"></i>
					<div className="sm-monsterconfig-infos-content">
						Select your Runes Sets
					</div>
					<div className={"sm-builds-monster-stats-box " + (this.state.setsIsOpen ? "" : "sm-hide")}>
						<FormSelect values={this.state.setTypeValues} className={'sm-input sm-builds-select'} onChange={this.onChangeSelect.bind(this, 'sets')}/>
						<button className="sm-button" onClick={this.onClickSubmit.bind(this, 'sets')}>Ok</button>
						<label htmlFor="brokenSet" className="sm-label sm-builds-brokenset">Broken Set</label>
						{this._buildBrokenSet()}
						<div className={"sm-stats-content " + (this.state.sets.length > 0  ? "" : "sm-hide")}>
							<ul>
								{Utils.map(this.state.sets, this._buildStat.bind(this, 'sets'))}
							</ul>
						</div>
					</div>
				</div>
				<hr/>
				<div className="sm-builds-monster-stats">
					<label className="sm-label" onClick={this.onClickShow.bind(this, 'runeStats')}>Runes Stats</label>
					<i className="glyphicon glyphicon-question-sign sm-monsterconfig-infos"></i>
					<div className="sm-monsterconfig-infos-content">
						Select the type of stat<br/>
						on runes pos 2/4/6
					</div>
					<div className={"sm-builds-monster-stats-box center " + (this.state.runeStatsIsOpen ? "" : "sm-hide")}>
						<div className='sm-input-rune'>
							<label className="sm-label">Pos 2</label>
							<FormSelect values={this.state.statsTypeRune2} defaultValue={this.state.monsterConfig.runeStat2Type} className='sm-input' onChange={this.onChangeRuneStats.bind(this, 'runeStat2Type')}/>
						</div>
						<div className='sm-input-rune'>
							<label className="sm-label">Pos 4</label>
							<FormSelect values={this.state.statsTypeRune4} defaultValue={this.state.monsterConfig.runeStat4Type} className='sm-input' onChange={this.onChangeRuneStats.bind(this, 'runeStat4Type')}/>
						</div>
						<div className='sm-input-rune'>
							<label className="sm-label">Pos 6</label>
							<FormSelect values={this.state.statsTypeRune6} defaultValue={this.state.monsterConfig.runeStat6Type} className='sm-input' onChange={this.onChangeRuneStats.bind(this, 'runeStat6Type')}/>
						</div>
					</div>
				</div>
				<hr/>
			</div>
		);
	}

}
export default MonsterConfig;
