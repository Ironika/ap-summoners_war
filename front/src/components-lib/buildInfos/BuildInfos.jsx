import React from 'react'
import AppHelper from 'helpers/AppHelper'
import BuildHelper from 'helpers/BuildHelper'
import MonsterConfigHelper from 'helpers/AppHelper'

import {Utils}  from 'ap-react-bootstrap'

import './BuildInfos.scss';

/* This class was auto-generated by the JavaScriptWriter */
class BuildInfos extends React.Component {

	constructor(props) {
		super(props);
	}

	componentWillMount() {
		this.state = {
            build: AppHelper.getData('/currentBuild'),
            isNewBuild: AppHelper.getData('/isNewBuild')
        }  
		AppHelper.register('/currentBuild', this, this._onBuildChange.bind(this));
	}

	componentWillUnmount() {
		AppHelper.unregister(this)
	}

	_onBuildChange() {
        this.setState({
            build: AppHelper.getData('/currentBuild'),
            isNewBuild: AppHelper.getData('/isNewBuild')
        })
    }

	onChangeBuildName(event) {
		this.getState('build').name = event.target.value
		this.setState({build: this.getState('build')})
	}

	onClickEdit(){
		let build = AppHelper.getData('/currentBuild')
		build.state = BuildState.SAVE.key
		BuildHelper.putBuild(build).
		then(function(result) {
			let promises = []
			let monstersConfig = AppHelper.getData('/currentMonstersConfig')
			for (let key in monstersConfig)
				promises.push(MonsterConfigHelper.putMonstersconfig(monstersConfig[key]))
			promises.push(BuildHelper.getUserBuilds(AuthHelper.getEntityId()))
			return Promise.all(promises)
		}.bind(this))
	}

	onClickSave() {
		AppHelper.put('/isNewBuild', false)
		let build = AppHelper.getData('/currentBuild')
		build.state = BuildState.SAVE.key
		BuildHelper.postBuild(build).
		then(function(result) {
			let promises = []
			let monstersConfig = AppHelper.getData('/currentMonstersConfig')
			for (let key in monstersConfig) {
				monstersConfig[key].buildId = result.id
				promises.push(MonsterConfigHelper.postMonstersconfig(monstersConfig[key]))
			}
			promises.push(BuildHelper.getUserBuilds(AuthHelper.getEntityId()))
			return Promise.all(promises)
		}.bind(this))
	}

	onClickDelete(buildId) {
		BuildHelper.deleteBuild(buildId).
		then(BuildHelper.getUserBuilds(AuthHelper.getEntityId()))
	}


	render() {
		if (this.state.build)
			return (
				<div className="sm-sheet sm-sheet-top sm-builds-infos">
					<label className="sm-label">Build Name</label>
					<input className="sm-input" type="text" value={this.state.build.name} onChange={this.onChangeBuildName.bind(this)}/>
					<label className="sm-label">Status</label>
					<input className="sm-input" value={this.state.build.state} disabled={true}/>
					<button className={"sm-button " + (this.state.isNewBuild ? "" : "sm-hide")} onClick={this.onClickSave.bind(this)}>Save</button>
					<button className={"sm-button " + (this.state.isNewBuild ? "sm-hide" : "")} onClick={this.onClickEdit.bind(this)}>Edit</button>
					<button className="sm-button">Build</button>
					<button className="sm-button sm-builds-infos-delete" onClick={this.onClickDelete.bind(this, this.state.build.id)}>Delete</button>
				</div>
			);
		else
			return(<div>No Build</div>);
	}

}
export default BuildInfos;
