import React from 'react';
import BuildMonsterConfigData from 'components-lib/buildMonsterConfig/BuildMonsterConfigData';

import {Utils, FormSelect}  from 'ap-react-bootstrap'

import './BuildMonsterConfig.scss';

/* This class was auto-generated by the JavaScriptWriter */
class BuildMonsterConfig extends React.Component {

	constructor(props) {
		super(props);
		this.BuildMonsterConfigDataObj = new BuildMonsterConfigData();
	}

	componentWillMount() {
		this.BuildMonsterConfigDataObj.register(this)
	}

	componentWillUnmount() {
		this.BuildMonsterConfigDataObj.unregister()
	}

	_buildStat(id, stat, key) {
		if(id == "requiredStat" | id == "notationStat")
			return (<li key={key}>{key + " : " + stat}</li>)
		else 
			return (<li key={key}>{stat}</li>)
	}

	render() {
		return (
			<div className="sm-build-buildmonsterconfig sm-content">
				<div className="sm-builds-monster-name">
					<img alt="Summoners War" src="assets/images/monsters/Homunculus-Awakened_Fire.jpg"/>
					<input className="sm-input" type="text" onChange={this.onChangeInput.bind(this, 'monsterName')}/>
				</div>
				<hr/>
				<div className="sm-builds-monster-stats">
					<label className="sm-label" onClick={this.onClickShow.bind(this, 'requiredStat')}>Required Stats</label>
					<div className={"sm-builds-monster-stats-box " + (this.state.requiredStatIsOpen ? "" : "sm-hide")}>
						<FormSelect values={this.state.statTypeValues} className={'sm-input sm-builds-select'} onChange={this.onChangeSelect.bind(this, 'requiredStat')}/>
						<input type="text" className="sm-input" onChange={this.onChangeInput.bind(this, 'requiredStat')}/>
						<button className="sm-button" onClick={this.onClickSubmit.bind(this, 'requiredStat')}>Ok</button>
						<div className="sm-stats-content">
							<ul>
								{Utils.map(this.state.requiredStats, this._buildStat.bind(this, 'requiredStat'))}
							</ul>
						</div>
					</div>
				</div>
				<hr/>
				<div className="sm-builds-monster-stats">
					<label className="sm-label" onClick={this.onClickShow.bind(this, 'notationStat')}>Notations Stats</label>
					<div className={"sm-builds-monster-stats-box " + (this.state.notationStatIsOpen ? "" : "sm-hide")}>
						<FormSelect values={this.state.statTypeValues} className={'sm-input sm-builds-select'} onChange={this.onChangeSelect.bind(this, 'notationStat')}/>
						<input type="text" className="sm-input" onChange={this.onChangeInput.bind(this, 'notationStat')}/>
						<button className="sm-button" onClick={this.onClickSubmit.bind(this, 'notationStat')}>Ok</button>
						<div className="sm-stats-content">
							<ul>
								{Utils.map(this.state.notationStats, this._buildStat.bind(this, 'notationStat'))}
							</ul>
						</div>
					</div>
				</div>
				<hr/>
				<div className="sm-builds-monster-stats">
					<label className="sm-label" onClick={this.onClickShow.bind(this, 'sets')}>Sets</label>
					<div className={"sm-builds-monster-stats-box " + (this.state.setsIsOpen ? "" : "sm-hide")}>
						<FormSelect values={this.state.setTypeValues} className={'sm-input sm-builds-select'} onChange={this.onChangeSelect.bind(this, 'sets')}/>
						<button className="sm-button" onClick={this.onClickSubmit.bind(this, 'sets')}>Ok</button>
						<div className="sm-stats-content">
							<ul>
								{Utils.map(this.state.sets, this._buildStat.bind(this, 'sets'))}
							</ul>
						</div>
					</div>
				</div>
				<hr/>
			</div>
		);
	}

}
export default BuildMonsterConfig;
