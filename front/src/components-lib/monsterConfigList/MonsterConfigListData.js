import AppHelper from 'helpers/AppHelper'
import AuthHelper from 'helpers/AuthHelper'

import MonsterConfigHelper from 'helpers/MonsterConfigHelper'

import {Utils, BaseData}  from 'ap-react-bootstrap'


/* This class was auto-generated by the JavaScriptWriter */
class MonsterConfigListData extends BaseData {

	register(obj) {
		super.register(obj)

		this.obj.onClickAddMonsterConfig = this.onClickAddMonsterConfig.bind(this)
		this.obj.onClickDeleteMonsterConfig = this.onClickDeleteMonsterConfig.bind(this)

       	this.obj.state = {
            monstersConfig: []
        }

        AppHelper.register('/currentBuild', this, this._onBuildChange.bind(this));

	}

	_onBuildChange() {
		let build = AppHelper.getData('/currentBuild')
       	this.monstersConfig = {}
    	let storeMonstersConfig = MonsterConfigHelper.getData()
    	for(let key in storeMonstersConfig)
    		if (build.id == storeMonstersConfig[key].buildId)
    			this.monstersConfig[key] = Utils.clone(storeMonstersConfig[key])
		AppHelper.put('/currentMonstersConfig', this.monstersConfig).
		then( function() {
			this.setState({monstersConfig: this.monstersConfig})
		}.bind(this))

	}

	onClickAddMonsterConfig() {
		let build = AppHelper.getData('/currentBuild')
		let monstersConfig = this.getState('monstersConfig')
		let monsterConfig = {id: String(new Date().getTime()), userId: build.userId}
		monstersConfig[monsterConfig.id] = monsterConfig
		AppHelper.put('/currentMonstersConfig', monstersConfig).
		then( function() {
			this.setState({monstersConfig: monstersConfig})
		}.bind(this))
	}

	onClickDeleteMonsterConfig(monsterConfig) {
		let monstersConfig = this.getState('monstersConfig')
		delete(monstersConfig[monsterConfig.id])
		AppHelper.put('/currentMonstersConfig', monstersConfig).
		then( function() {
			this.setState({monstersConfig: monstersConfig})
		}.bind(this))
	}

	unregister() {
		AppHelper.unregister(this)
	}
}
var MonsterConfigListObj = new MonsterConfigListData();
export default MonsterConfigListObj;
