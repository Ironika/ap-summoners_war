import AppHelper from 'helpers/AppHelper'
import AuthHelper from 'helpers/AuthHelper'

import MonsterConfigHelper from 'helpers/MonsterConfigHelper'

import {Utils, BaseData}  from 'ap-react-bootstrap'


/* This class was auto-generated by the JavaScriptWriter */
class MonsterConfigListData extends BaseData {

	register(obj) {
		super.register(obj)

		this.obj.onClickAddMonsterConfig = this.onClickAddMonsterConfig.bind(this)
		this.obj.onClickDeleteMonsterConfig = this.onClickDeleteMonsterConfig.bind(this)

       	this.obj.state = {
            monstersConfig: [],
            haveBuild: false
        }

        this._buildMonstersConfig()
        MonsterConfigHelper.register(this, this._buildMonstersConfig.bind(this))
        AppHelper.register('/currentBuild', this, this._onBuildChange.bind(this));
	}

	_buildMonstersConfig() {
		let storeMonstersConfig = MonsterConfigHelper.getData()
        let monstersConfig = {}
        for(let key in storeMonstersConfig)
            monstersConfig[key] = Utils.clone(storeMonstersConfig[key])

        AppHelper.put('/monstersConfig', monstersConfig).
        then(function() {
            this._onBuildChange()
        }.bind(this))
	}

	_onBuildChange() {
		let build = AppHelper.getData('/currentBuild')

		this.obj.state.haveBuild = false
		if(build) 
			this.obj.state.haveBuild = true

       	let currentMonstersConfig = {}
    	let storeMonstersConfig = AppHelper.getData('/monstersConfig')
    	for(let key in storeMonstersConfig)
    		if (build.id == storeMonstersConfig[key].buildId)
    			currentMonstersConfig[key] = storeMonstersConfig[key]
		this.setState({monstersConfig: currentMonstersConfig})

	}

	onClickAddMonsterConfig() {
		let build = AppHelper.getData('/currentBuild')
		let monsterConfig = {id: String(new Date().getTime()), userId: build.userId, buildId: build.id, brokenSet: false}

		AppHelper.put('/monstersConfig/' + monsterConfig.id, monsterConfig).
		then(function() {
			let currentMonstersConfig = this.getState('monstersConfig')
			currentMonstersConfig[monsterConfig.id] = monsterConfig
			this.setState({monstersConfig: currentMonstersConfig})
		}.bind(this))
		
	}

	onClickDeleteMonsterConfig(monsterConfig) {
		let monstersConfig = AppHelper.getData('/monstersConfig')
		delete(monstersConfig[monsterConfig.id])
		AppHelper.put('/monstersConfig', monstersConfig).
		then(function() {
			let currentMonstersConfig = this.getState('monstersConfig')
			delete(currentMonstersConfig[monsterConfig.id])
			this.setState({monstersConfig: currentMonstersConfig})
		}.bind(this))
	}

	unregister() {
		AppHelper.unregister(this)
		MonsterConfigHelper.unregister(this)
	}
}
var MonsterConfigListObj = new MonsterConfigListData();
export default MonsterConfigListObj;
