package org.ap.summonerwar.storage;

import org.bson.Document;
import org.bson.conversions.Bson;
import org.ap.web.storage.Mongo;
import static com.mongodb.client.model.Filters.*;
import org.ap.web.internal.APWebException;
import java.util.List;
import java.util.ArrayList;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.result.DeleteResult;

/* This class was auto-generated by the JavaWriter */
public class MonsterCollection {

	public static MongoCollection<Document> getCollection() throws APWebException {
		return Mongo.get().collection("monster");
	}

	public static MonsterData getById(String id) throws APWebException {
		Document document = getCollection().find(eq("id", id)).first();
		return fromDocument(document);
	}

	public static boolean deleteById(String id) throws APWebException {
		Document document = getCollection().findOneAndDelete(eq("id", id));
		return document != null;
	}

	public static List<MonsterData> getAll() throws APWebException {
		FindIterable<Document> documents = getCollection().find();
		List<MonsterData> result = new ArrayList<MonsterData>();
		for (Document document: documents){
			result.add(fromDocument(document));
		}
		return result;
	}

	public static List<MonsterData> get(Bson condition) throws APWebException {
		FindIterable<Document> documents = getCollection().find(condition);
		List<MonsterData> result = new ArrayList<MonsterData>();
		for (Document document: documents){
			result.add(fromDocument(document));
		}
		return result;
	}

	public static void create(MonsterData data) throws APWebException {
		Document document = toDocument(data);
		getCollection().insertOne(document);
	}

	public static boolean update(MonsterData data) throws APWebException {
		Document document = toDocument(data);
		Document result = getCollection().findOneAndUpdate(eq("id", data.getId()), new Document("$set", document));
		return result != null;
	}

	public static boolean updateNull(MonsterData data) throws APWebException {
		Document document = toNullDocument(data);
		Document result = getCollection().findOneAndUpdate(eq("id", data.getId()), new Document("$set", document));
		return result != null;
	}

	public static boolean delete(MonsterData data) throws APWebException {
		Document result = getCollection().findOneAndDelete(eq("id", data.getId()));
		return result != null;
	}

	public static long deleteMany(Bson condition) throws APWebException {
		DeleteResult result = getCollection().deleteMany(condition);
		return result.getDeletedCount();
	}

	public static long drop() throws APWebException {
		long result = getCollection().count();
		getCollection().drop();
		return result;
	}

	public static MonsterData fromDocument(Document document) {
		if(document == null) {
			return null;
		}
		MonsterData data = new MonsterData();
		data.acc = document.getInteger("acc");
		data.res = document.getInteger("res");
		data.lvl = document.getInteger("lvl");
		data.role = document.getString("role");
		data.star = document.getInteger("star");
		data.isAwaked = document.getBoolean("isAwaked");
		data.def = document.getInteger("def");
		data.spd = document.getInteger("spd");
		data.hp = document.getInteger("hp");
		data.crate = document.getInteger("crate");
		data.userId = document.getString("userId");
		data.elemType = document.getString("elemType");
		data.cdmg = document.getInteger("cdmg");
		data.name = document.getString("name");
		data.xp = document.getInteger("xp");
		data.atk = document.getInteger("atk");
		data.id = document.getString("id");
		return data;
	}

	public static Document toDocument(MonsterData monster) {
		Document document = new Document();
		if (monster.acc != null)
			document.append("acc", monster.acc);
		if (monster.res != null)
			document.append("res", monster.res);
		if (monster.lvl != null)
			document.append("lvl", monster.lvl);
		if (monster.role != null)
			document.append("role", monster.role);
		if (monster.star != null)
			document.append("star", monster.star);
		if (monster.isAwaked != null)
			document.append("isAwaked", monster.isAwaked);
		if (monster.def != null)
			document.append("def", monster.def);
		if (monster.spd != null)
			document.append("spd", monster.spd);
		if (monster.hp != null)
			document.append("hp", monster.hp);
		if (monster.crate != null)
			document.append("crate", monster.crate);
		if (monster.userId != null)
			document.append("userId", monster.userId);
		if (monster.elemType != null)
			document.append("elemType", monster.elemType);
		if (monster.cdmg != null)
			document.append("cdmg", monster.cdmg);
		if (monster.name != null)
			document.append("name", monster.name);
		if (monster.xp != null)
			document.append("xp", monster.xp);
		if (monster.atk != null)
			document.append("atk", monster.atk);
		if (monster.id != null)
			document.append("id", monster.id);
		return document;
	}

	public static Document toNullDocument(MonsterData monster) {
		Document document = new Document();
		document.append("acc", monster.acc);
		document.append("res", monster.res);
		document.append("lvl", monster.lvl);
		document.append("role", monster.role);
		document.append("star", monster.star);
		document.append("isAwaked", monster.isAwaked);
		document.append("def", monster.def);
		document.append("spd", monster.spd);
		document.append("hp", monster.hp);
		document.append("crate", monster.crate);
		document.append("userId", monster.userId);
		document.append("elemType", monster.elemType);
		document.append("cdmg", monster.cdmg);
		document.append("name", monster.name);
		document.append("xp", monster.xp);
		document.append("atk", monster.atk);
		document.append("id", monster.id);
		return document;
	}

}
