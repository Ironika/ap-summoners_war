package org.ap.summonerwar.storage;

import org.bson.Document;
import org.bson.conversions.Bson;
import org.ap.web.storage.Mongo;
import static com.mongodb.client.model.Filters.*;
import org.ap.web.internal.APWebException;
import java.util.List;
import java.util.ArrayList;
import com.mongodb.client.FindIterable;

/* This class was auto-generated by the JavaWriter */
public class ApauthCollection {

	public static ApauthData getByEntityId(String entityId) throws APWebException {
		Document document = Mongo.get().collection("apauth").find(eq("entityId", entityId)).first();
		return fromDocument(document);
	}

	public static boolean deleteByEntityId(String entityId) throws APWebException {
		Document document = Mongo.get().collection("apauth").findOneAndDelete(eq("entityId", entityId));
		return document != null;
	}

	public static ApauthData getById(String id) throws APWebException {
		Document document = Mongo.get().collection("apauth").find(eq("id", id)).first();
		return fromDocument(document);
	}

	public static boolean deleteById(String id) throws APWebException {
		Document document = Mongo.get().collection("apauth").findOneAndDelete(eq("id", id));
		return document != null;
	}

	public static ApauthData getByUsername(String username) throws APWebException {
		Document document = Mongo.get().collection("apauth").find(eq("username", username)).first();
		return fromDocument(document);
	}

	public static boolean deleteByUsername(String username) throws APWebException {
		Document document = Mongo.get().collection("apauth").findOneAndDelete(eq("username", username));
		return document != null;
	}

	public static ApauthData getByToken(String token) throws APWebException {
		Document document = Mongo.get().collection("apauth").find(eq("token", token)).first();
		return fromDocument(document);
	}

	public static boolean deleteByToken(String token) throws APWebException {
		Document document = Mongo.get().collection("apauth").findOneAndDelete(eq("token", token));
		return document != null;
	}

	public static List<ApauthData> getAll() throws APWebException {
		FindIterable<Document> documents = Mongo.get().collection("apauth").find();
		List<ApauthData> result = new ArrayList<ApauthData>();
		for (Document document: documents){
			result.add(fromDocument(document));
		}
		return result;
	}

	public static List<ApauthData> get(Bson condition) throws APWebException {
		FindIterable<Document> documents = Mongo.get().collection("apauth").find(condition);
		List<ApauthData> result = new ArrayList<ApauthData>();
		for (Document document: documents){
			result.add(fromDocument(document));
		}
		return result;
	}

	public static void create(ApauthData data) throws APWebException {
		Document document = toDocument(data);
		Mongo.get().collection("apauth").insertOne(document);
	}

	public static boolean update(ApauthData data) throws APWebException {
		Document document = toDocument(data);
		Document result = Mongo.get().collection("apauth").findOneAndUpdate(eq("id", data.getId()), new Document("$set", document));
		return result != null;
	}

	public static boolean delete(ApauthData data) throws APWebException {
		Document result = Mongo.get().collection("apauth").findOneAndDelete(eq("id", data.getId()));
		return result != null;
	}

	@SuppressWarnings("unchecked")
	public static ApauthData fromDocument(Document document) {
		if(document == null) {
			return null;
		}
		ApauthData data = new ApauthData();
		data.password = document.getString("password");
		data.roles = (List<String>)document.get("roles");
		data.tokenDateTime = (List<Integer>)document.get("tokenDateTime");
		data.registrationDate = (List<Integer>)document.get("registrationDate");
		data.registered = document.getBoolean("registered");
		data.active = document.getBoolean("active");
		data.entityId = document.getString("entityId");
		data.id = document.getString("id");
		data.type = document.getString("type");
		data.tokenType = document.getString("tokenType");
		data.username = document.getString("username");
		data.token = document.getString("token");
		return data;
	}

	public static Document toDocument(ApauthData apauth) {
		Document document = new Document();
		if (apauth.password != null)
			document.append("password", apauth.password);
		if (apauth.roles != null)
			document.append("roles", apauth.roles);
		if (apauth.tokenDateTime != null)
			document.append("tokenDateTime", apauth.tokenDateTime);
		if (apauth.registrationDate != null)
			document.append("registrationDate", apauth.registrationDate);
		if (apauth.registered != null)
			document.append("registered", apauth.registered);
		if (apauth.active != null)
			document.append("active", apauth.active);
		if (apauth.entityId != null)
			document.append("entityId", apauth.entityId);
		if (apauth.id != null)
			document.append("id", apauth.id);
		if (apauth.type != null)
			document.append("type", apauth.type);
		if (apauth.tokenType != null)
			document.append("tokenType", apauth.tokenType);
		if (apauth.username != null)
			document.append("username", apauth.username);
		if (apauth.token != null)
			document.append("token", apauth.token);
		return document;
	}

}
