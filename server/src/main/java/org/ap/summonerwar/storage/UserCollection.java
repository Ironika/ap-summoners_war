package org.ap.summonerwar.storage;

import org.bson.Document;
import org.bson.conversions.Bson;
import org.ap.web.storage.Mongo;
import static com.mongodb.client.model.Filters.*;
import org.ap.web.internal.APWebException;
import java.util.List;
import java.util.ArrayList;
import com.mongodb.client.FindIterable;

/* This class was auto-generated by the JavaWriter */
public class UserCollection {

	public static UserData getByAuthId(String authId) throws APWebException {
		Document document = Mongo.get().collection("user").find(eq("authId", authId)).first();
		return fromDocument(document);
	}

	public static boolean deleteByAuthId(String authId) throws APWebException {
		Document document = Mongo.get().collection("user").findOneAndDelete(eq("authId", authId));
		return document != null;
	}

	public static UserData getById(String id) throws APWebException {
		Document document = Mongo.get().collection("user").find(eq("id", id)).first();
		return fromDocument(document);
	}

	public static boolean deleteById(String id) throws APWebException {
		Document document = Mongo.get().collection("user").findOneAndDelete(eq("id", id));
		return document != null;
	}

	public static List<UserData> getAll() throws APWebException {
		FindIterable<Document> documents = Mongo.get().collection("user").find();
		List<UserData> result = new ArrayList<UserData>();
		for (Document document: documents){
			result.add(fromDocument(document));
		}
		return result;
	}

	public static List<UserData> get(Bson condition) throws APWebException {
		FindIterable<Document> documents = Mongo.get().collection("user").find(condition);
		List<UserData> result = new ArrayList<UserData>();
		for (Document document: documents){
			result.add(fromDocument(document));
		}
		return result;
	}

	public static void create(UserData data) throws APWebException {
		Document document = toDocument(data);
		Mongo.get().collection("user").insertOne(document);
	}

	public static boolean update(UserData data) throws APWebException {
		Document document = toDocument(data);
		Document result = Mongo.get().collection("user").findOneAndUpdate(eq("id", data.getId()), new Document("$set", document));
		return result != null;
	}

	public static boolean delete(UserData data) throws APWebException {
		Document result = Mongo.get().collection("user").findOneAndDelete(eq("id", data.getId()));
		return result != null;
	}

	public static UserData fromDocument(Document document) {
		if(document == null) {
			return null;
		}
		UserData data = new UserData();
		data.id = document.getString("id");
		return data;
	}

	public static Document toDocument(UserData user) {
		Document document = new Document();
		if (user.id != null)
			document.append("id", user.id);
		return document;
	}

}
