package org.ap.summonerwar.storage;

import org.bson.Document;
import org.bson.conversions.Bson;
import org.ap.web.storage.Mongo;
import static com.mongodb.client.model.Filters.*;
import org.ap.web.internal.APWebException;
import java.util.List;
import java.util.ArrayList;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.result.DeleteResult;

/* This class was auto-generated by the JavaWriter */
public class BuildResultCollection {

	public static MongoCollection<Document> getCollection() throws APWebException {
		return Mongo.get().collection("buildResult");
	}

	public static BuildResultData getById(String id) throws APWebException {
		Document document = getCollection().find(eq("id", id)).first();
		return fromDocument(document);
	}

	public static boolean deleteById(String id) throws APWebException {
		Document document = getCollection().findOneAndDelete(eq("id", id));
		return document != null;
	}

	public static List<BuildResultData> getAll() throws APWebException {
		FindIterable<Document> documents = getCollection().find();
		List<BuildResultData> result = new ArrayList<BuildResultData>();
		for (Document document: documents){
			result.add(fromDocument(document));
		}
		return result;
	}

	public static List<BuildResultData> get(Bson condition) throws APWebException {
		FindIterable<Document> documents = getCollection().find(condition);
		List<BuildResultData> result = new ArrayList<BuildResultData>();
		for (Document document: documents){
			result.add(fromDocument(document));
		}
		return result;
	}

	public static void create(BuildResultData data) throws APWebException {
		Document document = toDocument(data);
		getCollection().insertOne(document);
	}

	public static boolean update(BuildResultData data) throws APWebException {
		Document document = toDocument(data);
		Document result = getCollection().findOneAndUpdate(eq("id", data.getId()), new Document("$set", document));
		return result != null;
	}

	public static boolean updateNull(BuildResultData data) throws APWebException {
		Document document = toNullDocument(data);
		Document result = getCollection().findOneAndUpdate(eq("id", data.getId()), new Document("$set", document));
		return result != null;
	}

	public static boolean delete(BuildResultData data) throws APWebException {
		Document result = getCollection().findOneAndDelete(eq("id", data.getId()));
		return result != null;
	}

	public static long deleteMany(Bson condition) throws APWebException {
		DeleteResult result = getCollection().deleteMany(condition);
		return result.getDeletedCount();
	}

	public static long drop() throws APWebException {
		long result = getCollection().count();
		getCollection().drop();
		return result;
	}

	public static BuildResultData fromDocument(Document document) {
		if(document == null) {
			return null;
		}
		BuildResultData data = new BuildResultData();
		data.eval = document.getDouble("eval");
		data.buildId = document.getString("buildId");
		data.id = document.getString("id");
		data.userId = document.getString("userId");
		return data;
	}

	public static Document toDocument(BuildResultData buildResult) {
		Document document = new Document();
		if (buildResult.eval != null)
			document.append("eval", buildResult.eval);
		if (buildResult.buildId != null)
			document.append("buildId", buildResult.buildId);
		if (buildResult.id != null)
			document.append("id", buildResult.id);
		if (buildResult.userId != null)
			document.append("userId", buildResult.userId);
		return document;
	}

	public static Document toNullDocument(BuildResultData buildResult) {
		Document document = new Document();
		document.append("eval", buildResult.eval);
		document.append("buildId", buildResult.buildId);
		document.append("id", buildResult.id);
		document.append("userId", buildResult.userId);
		return document;
	}

}
