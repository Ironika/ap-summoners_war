package org.ap.summonerwar.storage;

import org.bson.Document;
import org.bson.conversions.Bson;
import org.ap.web.storage.Mongo;
import static com.mongodb.client.model.Filters.*;
import org.ap.web.internal.APWebException;
import java.util.List;
import java.util.ArrayList;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.result.DeleteResult;

/* This class was auto-generated by the JavaWriter */
public class MonsterConfigCollection {

	public static MongoCollection<Document> getCollection() throws APWebException {
		return Mongo.get().collection("monsterConfig");
	}

	public static MonsterConfigData getById(String id) throws APWebException {
		Document document = getCollection().find(eq("id", id)).first();
		return fromDocument(document);
	}

	public static boolean deleteById(String id) throws APWebException {
		Document document = getCollection().findOneAndDelete(eq("id", id));
		return document != null;
	}

	public static List<MonsterConfigData> getAll() throws APWebException {
		FindIterable<Document> documents = getCollection().find();
		List<MonsterConfigData> result = new ArrayList<MonsterConfigData>();
		for (Document document: documents){
			result.add(fromDocument(document));
		}
		return result;
	}

	public static List<MonsterConfigData> get(Bson condition) throws APWebException {
		FindIterable<Document> documents = getCollection().find(condition);
		List<MonsterConfigData> result = new ArrayList<MonsterConfigData>();
		for (Document document: documents){
			result.add(fromDocument(document));
		}
		return result;
	}

	public static void create(MonsterConfigData data) throws APWebException {
		Document document = toDocument(data);
		getCollection().insertOne(document);
	}

	public static boolean update(MonsterConfigData data) throws APWebException {
		Document document = toDocument(data);
		Document result = getCollection().findOneAndUpdate(eq("id", data.getId()), new Document("$set", document));
		return result != null;
	}

	public static boolean updateNull(MonsterConfigData data) throws APWebException {
		Document document = toNullDocument(data);
		Document result = getCollection().findOneAndUpdate(eq("id", data.getId()), new Document("$set", document));
		return result != null;
	}

	public static boolean delete(MonsterConfigData data) throws APWebException {
		Document result = getCollection().findOneAndDelete(eq("id", data.getId()));
		return result != null;
	}

	public static long deleteMany(Bson condition) throws APWebException {
		DeleteResult result = getCollection().deleteMany(condition);
		return result.getDeletedCount();
	}

	public static long drop() throws APWebException {
		long result = getCollection().count();
		getCollection().drop();
		return result;
	}

	public static MonsterConfigData fromDocument(Document document) {
		if(document == null) {
			return null;
		}
		MonsterConfigData data = new MonsterConfigData();
		data.RequiredHp = document.getInteger("RequiredHp");
		data.set3 = document.getString("set3");
		data.set2 = document.getString("set2");
		data.RequiredSpd = document.getInteger("RequiredSpd");
		data.buildId = document.getString("buildId");
		data.NotationDef = document.getInteger("NotationDef");
		data.RequiredDef = document.getInteger("RequiredDef");
		data.RequiredCrate = document.getInteger("RequiredCrate");
		data.NotationSpd = document.getInteger("NotationSpd");
		data.RequiredRes = document.getInteger("RequiredRes");
		data.RequiredAcc = document.getInteger("RequiredAcc");
		data.NotationCdmg = document.getInteger("NotationCdmg");
		data.NotationCrate = document.getInteger("NotationCrate");
		data.RequiredAtk = document.getInteger("RequiredAtk");
		data.RequiredCdmg = document.getInteger("RequiredCdmg");
		data.NotationHp = document.getInteger("NotationHp");
		data.NotationAcc = document.getInteger("NotationAcc");
		data.monsterId = document.getString("monsterId");
		data.NotationRes = document.getInteger("NotationRes");
		data.set1 = document.getString("set1");
		data.id = document.getString("id");
		data.NotationAtk = document.getInteger("NotationAtk");
		return data;
	}

	public static Document toDocument(MonsterConfigData monsterConfig) {
		Document document = new Document();
		if (monsterConfig.RequiredHp != null)
			document.append("RequiredHp", monsterConfig.RequiredHp);
		if (monsterConfig.set3 != null)
			document.append("set3", monsterConfig.set3);
		if (monsterConfig.set2 != null)
			document.append("set2", monsterConfig.set2);
		if (monsterConfig.RequiredSpd != null)
			document.append("RequiredSpd", monsterConfig.RequiredSpd);
		if (monsterConfig.buildId != null)
			document.append("buildId", monsterConfig.buildId);
		if (monsterConfig.NotationDef != null)
			document.append("NotationDef", monsterConfig.NotationDef);
		if (monsterConfig.RequiredDef != null)
			document.append("RequiredDef", monsterConfig.RequiredDef);
		if (monsterConfig.RequiredCrate != null)
			document.append("RequiredCrate", monsterConfig.RequiredCrate);
		if (monsterConfig.NotationSpd != null)
			document.append("NotationSpd", monsterConfig.NotationSpd);
		if (monsterConfig.RequiredRes != null)
			document.append("RequiredRes", monsterConfig.RequiredRes);
		if (monsterConfig.RequiredAcc != null)
			document.append("RequiredAcc", monsterConfig.RequiredAcc);
		if (monsterConfig.NotationCdmg != null)
			document.append("NotationCdmg", monsterConfig.NotationCdmg);
		if (monsterConfig.NotationCrate != null)
			document.append("NotationCrate", monsterConfig.NotationCrate);
		if (monsterConfig.RequiredAtk != null)
			document.append("RequiredAtk", monsterConfig.RequiredAtk);
		if (monsterConfig.RequiredCdmg != null)
			document.append("RequiredCdmg", monsterConfig.RequiredCdmg);
		if (monsterConfig.NotationHp != null)
			document.append("NotationHp", monsterConfig.NotationHp);
		if (monsterConfig.NotationAcc != null)
			document.append("NotationAcc", monsterConfig.NotationAcc);
		if (monsterConfig.monsterId != null)
			document.append("monsterId", monsterConfig.monsterId);
		if (monsterConfig.NotationRes != null)
			document.append("NotationRes", monsterConfig.NotationRes);
		if (monsterConfig.set1 != null)
			document.append("set1", monsterConfig.set1);
		if (monsterConfig.id != null)
			document.append("id", monsterConfig.id);
		if (monsterConfig.NotationAtk != null)
			document.append("NotationAtk", monsterConfig.NotationAtk);
		return document;
	}

	public static Document toNullDocument(MonsterConfigData monsterConfig) {
		Document document = new Document();
		document.append("RequiredHp", monsterConfig.RequiredHp);
		document.append("set3", monsterConfig.set3);
		document.append("set2", monsterConfig.set2);
		document.append("RequiredSpd", monsterConfig.RequiredSpd);
		document.append("buildId", monsterConfig.buildId);
		document.append("NotationDef", monsterConfig.NotationDef);
		document.append("RequiredDef", monsterConfig.RequiredDef);
		document.append("RequiredCrate", monsterConfig.RequiredCrate);
		document.append("NotationSpd", monsterConfig.NotationSpd);
		document.append("RequiredRes", monsterConfig.RequiredRes);
		document.append("RequiredAcc", monsterConfig.RequiredAcc);
		document.append("NotationCdmg", monsterConfig.NotationCdmg);
		document.append("NotationCrate", monsterConfig.NotationCrate);
		document.append("RequiredAtk", monsterConfig.RequiredAtk);
		document.append("RequiredCdmg", monsterConfig.RequiredCdmg);
		document.append("NotationHp", monsterConfig.NotationHp);
		document.append("NotationAcc", monsterConfig.NotationAcc);
		document.append("monsterId", monsterConfig.monsterId);
		document.append("NotationRes", monsterConfig.NotationRes);
		document.append("set1", monsterConfig.set1);
		document.append("id", monsterConfig.id);
		document.append("NotationAtk", monsterConfig.NotationAtk);
		return document;
	}

}
