package org.ap.summonerwar.storage;

import org.bson.Document;
import org.bson.conversions.Bson;
import org.ap.web.storage.Mongo;
import static com.mongodb.client.model.Filters.*;
import org.ap.web.internal.APWebException;
import java.util.List;
import java.util.ArrayList;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.result.DeleteResult;

/* This class was auto-generated by the JavaWriter */
public class MonsterConfigCollection {

	public static MongoCollection<Document> getCollection() throws APWebException {
		return Mongo.get().collection("monsterConfig");
	}

	public static MonsterConfigData getById(String id) throws APWebException {
		Document document = getCollection().find(eq("id", id)).first();
		return fromDocument(document);
	}

	public static boolean deleteById(String id) throws APWebException {
		Document document = getCollection().findOneAndDelete(eq("id", id));
		return document != null;
	}

	public static List<MonsterConfigData> getAll() throws APWebException {
		FindIterable<Document> documents = getCollection().find();
		List<MonsterConfigData> result = new ArrayList<MonsterConfigData>();
		for (Document document: documents){
			result.add(fromDocument(document));
		}
		return result;
	}

	public static List<MonsterConfigData> get(Bson condition) throws APWebException {
		FindIterable<Document> documents = getCollection().find(condition);
		List<MonsterConfigData> result = new ArrayList<MonsterConfigData>();
		for (Document document: documents){
			result.add(fromDocument(document));
		}
		return result;
	}

	public static void create(MonsterConfigData data) throws APWebException {
		Document document = toDocument(data);
		getCollection().insertOne(document);
	}

	public static boolean update(MonsterConfigData data) throws APWebException {
		Document document = toDocument(data);
		Document result = getCollection().findOneAndUpdate(eq("id", data.getId()), new Document("$set", document));
		return result != null;
	}

	public static boolean updateNull(MonsterConfigData data) throws APWebException {
		Document document = toNullDocument(data);
		Document result = getCollection().findOneAndUpdate(eq("id", data.getId()), new Document("$set", document));
		return result != null;
	}

	public static boolean delete(MonsterConfigData data) throws APWebException {
		Document result = getCollection().findOneAndDelete(eq("id", data.getId()));
		return result != null;
	}

	public static long deleteMany(Bson condition) throws APWebException {
		DeleteResult result = getCollection().deleteMany(condition);
		return result.getDeletedCount();
	}

	public static long drop() throws APWebException {
		long result = getCollection().count();
		getCollection().drop();
		return result;
	}

	public static MonsterConfigData fromDocument(Document document) {
		if(document == null) {
			return null;
		}
		MonsterConfigData data = new MonsterConfigData();
		data.requiredDef = document.getInteger("requiredDef");
		data.notationSpd = document.getInteger("notationSpd");
		data.requiredAcc = document.getInteger("requiredAcc");
		data.notationHp = document.getInteger("notationHp");
		data.runeStat2Type = document.getString("runeStat2Type");
		data.requiredCrate = document.getInteger("requiredCrate");
		data.runeStat4Type = document.getString("runeStat4Type");
		data.monsterId = document.getString("monsterId");
		data.id = document.getString("id");
		data.requiredAtk = document.getInteger("requiredAtk");
		data.requiredCdmg = document.getInteger("requiredCdmg");
		data.notationCdmg = document.getInteger("notationCdmg");
		data.notationAcc = document.getInteger("notationAcc");
		data.notationDef = document.getInteger("notationDef");
		data.set3 = document.getString("set3");
		data.requiredRes = document.getInteger("requiredRes");
		data.set2 = document.getString("set2");
		data.brokenSet = document.getBoolean("brokenSet");
		data.buildId = document.getString("buildId");
		data.requiredSpd = document.getInteger("requiredSpd");
		data.userId = document.getString("userId");
		data.runeStat6Type = document.getString("runeStat6Type");
		data.requiredHp = document.getInteger("requiredHp");
		data.notationCrate = document.getInteger("notationCrate");
		data.notationAtk = document.getInteger("notationAtk");
		data.set1 = document.getString("set1");
		data.orderAtk = document.getInteger("orderAtk");
		data.notationRes = document.getInteger("notationRes");
		return data;
	}

	public static Document toDocument(MonsterConfigData monsterConfig) {
		Document document = new Document();
		if (monsterConfig.requiredDef != null)
			document.append("requiredDef", monsterConfig.requiredDef);
		if (monsterConfig.notationSpd != null)
			document.append("notationSpd", monsterConfig.notationSpd);
		if (monsterConfig.requiredAcc != null)
			document.append("requiredAcc", monsterConfig.requiredAcc);
		if (monsterConfig.notationHp != null)
			document.append("notationHp", monsterConfig.notationHp);
		if (monsterConfig.runeStat2Type != null)
			document.append("runeStat2Type", monsterConfig.runeStat2Type);
		if (monsterConfig.requiredCrate != null)
			document.append("requiredCrate", monsterConfig.requiredCrate);
		if (monsterConfig.runeStat4Type != null)
			document.append("runeStat4Type", monsterConfig.runeStat4Type);
		if (monsterConfig.monsterId != null)
			document.append("monsterId", monsterConfig.monsterId);
		if (monsterConfig.id != null)
			document.append("id", monsterConfig.id);
		if (monsterConfig.requiredAtk != null)
			document.append("requiredAtk", monsterConfig.requiredAtk);
		if (monsterConfig.requiredCdmg != null)
			document.append("requiredCdmg", monsterConfig.requiredCdmg);
		if (monsterConfig.notationCdmg != null)
			document.append("notationCdmg", monsterConfig.notationCdmg);
		if (monsterConfig.notationAcc != null)
			document.append("notationAcc", monsterConfig.notationAcc);
		if (monsterConfig.notationDef != null)
			document.append("notationDef", monsterConfig.notationDef);
		if (monsterConfig.set3 != null)
			document.append("set3", monsterConfig.set3);
		if (monsterConfig.requiredRes != null)
			document.append("requiredRes", monsterConfig.requiredRes);
		if (monsterConfig.set2 != null)
			document.append("set2", monsterConfig.set2);
		if (monsterConfig.brokenSet != null)
			document.append("brokenSet", monsterConfig.brokenSet);
		if (monsterConfig.buildId != null)
			document.append("buildId", monsterConfig.buildId);
		if (monsterConfig.requiredSpd != null)
			document.append("requiredSpd", monsterConfig.requiredSpd);
		if (monsterConfig.userId != null)
			document.append("userId", monsterConfig.userId);
		if (monsterConfig.runeStat6Type != null)
			document.append("runeStat6Type", monsterConfig.runeStat6Type);
		if (monsterConfig.requiredHp != null)
			document.append("requiredHp", monsterConfig.requiredHp);
		if (monsterConfig.notationCrate != null)
			document.append("notationCrate", monsterConfig.notationCrate);
		if (monsterConfig.notationAtk != null)
			document.append("notationAtk", monsterConfig.notationAtk);
		if (monsterConfig.set1 != null)
			document.append("set1", monsterConfig.set1);
		if (monsterConfig.orderAtk != null)
			document.append("orderAtk", monsterConfig.orderAtk);
		if (monsterConfig.notationRes != null)
			document.append("notationRes", monsterConfig.notationRes);
		return document;
	}

	public static Document toNullDocument(MonsterConfigData monsterConfig) {
		Document document = new Document();
		document.append("requiredDef", monsterConfig.requiredDef);
		document.append("notationSpd", monsterConfig.notationSpd);
		document.append("requiredAcc", monsterConfig.requiredAcc);
		document.append("notationHp", monsterConfig.notationHp);
		document.append("runeStat2Type", monsterConfig.runeStat2Type);
		document.append("requiredCrate", monsterConfig.requiredCrate);
		document.append("runeStat4Type", monsterConfig.runeStat4Type);
		document.append("monsterId", monsterConfig.monsterId);
		document.append("id", monsterConfig.id);
		document.append("requiredAtk", monsterConfig.requiredAtk);
		document.append("requiredCdmg", monsterConfig.requiredCdmg);
		document.append("notationCdmg", monsterConfig.notationCdmg);
		document.append("notationAcc", monsterConfig.notationAcc);
		document.append("notationDef", monsterConfig.notationDef);
		document.append("set3", monsterConfig.set3);
		document.append("requiredRes", monsterConfig.requiredRes);
		document.append("set2", monsterConfig.set2);
		document.append("brokenSet", monsterConfig.brokenSet);
		document.append("buildId", monsterConfig.buildId);
		document.append("requiredSpd", monsterConfig.requiredSpd);
		document.append("userId", monsterConfig.userId);
		document.append("runeStat6Type", monsterConfig.runeStat6Type);
		document.append("requiredHp", monsterConfig.requiredHp);
		document.append("notationCrate", monsterConfig.notationCrate);
		document.append("notationAtk", monsterConfig.notationAtk);
		document.append("set1", monsterConfig.set1);
		document.append("orderAtk", monsterConfig.orderAtk);
		document.append("notationRes", monsterConfig.notationRes);
		return document;
	}

}
