package org.ap.summonerwar.rest.servlet;

import javax.ws.rs.*;
import javax.ws.rs.core.*;
import javax.ws.rs.core.Response.*;
import org.ap.web.rest.servlet.APServletBase;
import org.ap.summonerwar.bean.RuneBean;
import org.ap.summonerwar.storage.RuneData;
import org.ap.summonerwar.storage.RuneCollection;
import org.ap.web.internal.APWebException;
import java.util.List;
import java.util.ArrayList;
import javax.annotation.security.RolesAllowed;
import org.ap.web.internal.UUIDGenerator;
import com.mongodb.MongoWriteException;

/* This class was auto-generated by the JavaWriter */
@Path("/runes")
public class RuneServlet extends APServletBase {

	public static final String PATH = "/runes";

	@GET
	@Produces({MediaType.APPLICATION_JSON})
	@RolesAllowed("user")
	public Response getRunes(@Context SecurityContext sc) {
		try {
			List<RuneData> datas = RuneCollection.getAll();
			
			List<RuneBean> beanList = new ArrayList<RuneBean>();
			for (RuneData data : datas) {
				RuneBean bean = new RuneBean();
				bean.lvl = data.getLvl();
				bean.set = data.getSet();
				bean.stat4Type = data.getStat4Type();
				bean.star = data.getStar();
				bean.stat2Type = data.getStat2Type();
				bean.statSub = data.getStatSub();
				bean.statMain = data.getStatMain();
				bean.stat4 = data.getStat4();
				bean.userId = data.getUserId();
				bean.stat3Type = data.getStat3Type();
				bean.stat2 = data.getStat2();
				bean.pos = data.getPos();
				bean.stat3 = data.getStat3();
				bean.statSubType = data.getStatSubType();
				bean.stat1 = data.getStat1();
				bean.monsterId = data.getMonsterId();
				bean.stat1Type = data.getStat1Type();
				bean.statMainType = data.getStatMainType();
				bean.id = data.getId();
				
				beanList.add(bean);
			}
			
			return Response.status(Status.OK).entity(beanList.toArray(new RuneBean[beanList.size()])).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@POST
	@Consumes({MediaType.APPLICATION_JSON})
	public Response postRune(@Context SecurityContext sc, RuneBean runeBean) {
		try {
			RuneData data = new RuneData();
			data.setId(UUIDGenerator.nextId());
			data.setLvl(runeBean.lvl);
			data.setSet(runeBean.set);
			data.setStat4Type(runeBean.stat4Type);
			data.setStar(runeBean.star);
			data.setStat2Type(runeBean.stat2Type);
			data.setStatSub(runeBean.statSub);
			data.setStatMain(runeBean.statMain);
			data.setStat4(runeBean.stat4);
			data.setUserId(runeBean.userId);
			data.setStat3Type(runeBean.stat3Type);
			data.setStat2(runeBean.stat2);
			data.setPos(runeBean.pos);
			data.setStat3(runeBean.stat3);
			data.setStatSubType(runeBean.statSubType);
			data.setStat1(runeBean.stat1);
			data.setMonsterId(runeBean.monsterId);
			data.setStat1Type(runeBean.stat1Type);
			data.setStatMainType(runeBean.statMainType);
			RuneCollection.create(data);
			return Response.status(Status.CREATED).entity("{\"id\": \"" + data.id + "\"}").build();
			
		} catch (MongoWriteException e) {
			return Response.status(Status.FORBIDDEN).build();
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@GET
	@Path("/{runeId}")
	@Produces({MediaType.APPLICATION_JSON})
	@RolesAllowed("user")
	public Response getRune(@Context SecurityContext sc, @PathParam("runeId") final String runeId) {
		try {
			RuneData data = RuneCollection.getById(runeId);
			if(data == null) {
				return Response.status(Status.NOT_FOUND).build();
			}
			RuneBean bean = new RuneBean();
			bean.lvl = data.getLvl();
			bean.set = data.getSet();
			bean.stat4Type = data.getStat4Type();
			bean.star = data.getStar();
			bean.stat2Type = data.getStat2Type();
			bean.statSub = data.getStatSub();
			bean.statMain = data.getStatMain();
			bean.stat4 = data.getStat4();
			bean.userId = data.getUserId();
			bean.stat3Type = data.getStat3Type();
			bean.stat2 = data.getStat2();
			bean.pos = data.getPos();
			bean.stat3 = data.getStat3();
			bean.statSubType = data.getStatSubType();
			bean.stat1 = data.getStat1();
			bean.monsterId = data.getMonsterId();
			bean.stat1Type = data.getStat1Type();
			bean.statMainType = data.getStatMainType();
			bean.id = data.getId();
			
			return Response.status(Status.OK).entity(bean).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@PUT
	@Path("/{runeId}")
	@Consumes({MediaType.APPLICATION_JSON})
	@RolesAllowed("user")
	public Response putRune(@Context SecurityContext sc, @PathParam("runeId") final String runeId, RuneBean runeBean) {
		try {
			// Get actual data object
			RuneData data = RuneCollection.getById(runeId);
			// Check data exists
			if (data == null) {
				throw new APWebException("rune not found", "AP_RUNE_NOTFOUND", Status.BAD_REQUEST);
			}
			// Update the data object
			data.setLvl(runeBean.lvl);
			data.setSet(runeBean.set);
			data.setStat4Type(runeBean.stat4Type);
			data.setStar(runeBean.star);
			data.setStat2Type(runeBean.stat2Type);
			data.setStatSub(runeBean.statSub);
			data.setStatMain(runeBean.statMain);
			data.setStat4(runeBean.stat4);
			data.setUserId(runeBean.userId);
			data.setStat3Type(runeBean.stat3Type);
			data.setStat2(runeBean.stat2);
			data.setPos(runeBean.pos);
			data.setStat3(runeBean.stat3);
			data.setStatSubType(runeBean.statSubType);
			data.setStat1(runeBean.stat1);
			data.setMonsterId(runeBean.monsterId);
			data.setStat1Type(runeBean.stat1Type);
			data.setStatMainType(runeBean.statMainType);
			// Store the updated data object
			RuneCollection.updateNull(data);
			// Send the response
			return Response.status(Status.OK).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@DELETE
	@Path("/{runeId}")
	@RolesAllowed("user")
	public Response deleteRune(@Context SecurityContext sc, @PathParam("runeId") final String runeId) {
		try {
			if (!RuneCollection.deleteById(runeId)) {
				throw new APWebException("rune not found", "AP_RUNE_NOTFOUND", Status.BAD_REQUEST);
			}
			return Response.status(Status.OK).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

}
