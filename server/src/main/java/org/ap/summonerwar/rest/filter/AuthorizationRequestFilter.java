package org.ap.summonerwar.rest.filter;

import javax.ws.rs.WebApplicationException;
import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerRequestFilter;
import javax.ws.rs.container.PreMatching;
import org.ap.web.rest.security.*;
import org.ap.web.internal.APWebException;
import org.bson.Document;
import org.ap.web.storage.Mongo;
import static com.mongodb.client.model.Filters.*;
import javax.ws.rs.core.Response.Status;

/* This class was auto-generated by the JavaWriter */
@PreMatching
public class AuthorizationRequestFilter implements ContainerRequestFilter {

	public static final String HEADER = "Authorization";

	public AuthorizationRequestFilter() {
	}

	@Override
	public void filter(ContainerRequestContext requestContext) throws WebApplicationException {
		if (requestContext.getMethod().equals("OPTIONS")) return;
		String header = requestContext.getHeaderString(HEADER);
		if (header == null) {
			throw new WebApplicationException(Status.UNAUTHORIZED);
		} else {
			try {
				String[] credentials = Encoder.decodeBasicAuth(header);
				if (credentials == null || credentials.length != 2) {
					throw new WebApplicationException(Status.UNAUTHORIZED);
				}
				Document document = Mongo.get().collection("apauth").find(and(eq("username", credentials[0]), eq("password", credentials[1]))).first();
				if (document == null) {
					throw new WebApplicationException(Status.UNAUTHORIZED);
				}
				requestContext.setSecurityContext(new APSecurityContext(document.getString("username"), new String[0]));
			} catch (APWebException e) {
				throw new WebApplicationException(Status.UNAUTHORIZED);
			}
		}
	}

}
