package org.ap.summonerwar.rest.servlet;

import javax.ws.rs.*;
import javax.ws.rs.core.*;
import org.bson.Document;
import javax.ws.rs.core.Response.*;
import org.ap.web.storage.Mongo;
import org.ap.web.rest.servlet.APServletBase;
import org.ap.summonerwar.bean.UserBean;
import java.util.ArrayList;
import java.util.List;
import com.mongodb.client.FindIterable;
import org.ap.web.internal.UUIDGenerator;
import com.mongodb.MongoWriteException;
import org.ap.summonerwar.storage.ApauthData;
import org.ap.summonerwar.storage.ApauthCollection;
import org.ap.summonerwar.storage.UserData;
import org.ap.summonerwar.storage.UserCollection;
import org.ap.web.internal.APWebException;
import static com.mongodb.client.model.Filters.*;
import org.ap.summonerwar.bean.RuneBean;
import org.ap.summonerwar.bean.MonsterBean;

/* This class was auto-generated by the JavaWriter */
@Path("/user")
public class UserServlet extends APServletBase {

	public static final String PATH = "/user";

	@GET
	@Produces({MediaType.APPLICATION_JSON})
	public Response getUsers(@Context SecurityContext sc) {
		try {
			FindIterable<Document> documents = Mongo.get().collection("user").find();
			List<UserBean> beanList = new ArrayList<UserBean>();
			for (Document document: documents){
				UserBean bean = new UserBean();
				bean.id = document.getString("id");
				bean.username = document.getString("username");
				bean.password = document.getString("password");
				beanList.add(bean);
			}
			return Response.status(Status.OK).entity(beanList.toArray(new UserBean[beanList.size()])).build();
			
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@POST
	@Consumes({MediaType.APPLICATION_JSON})
	public Response postUser(@Context SecurityContext sc, UserBean userBean) {
		try {
			ApauthData dataAuth = ApauthCollection.getByUsername(userBean.username);
			if(dataAuth != null) {
				throw APWebException.AP_AUTH_REG_001;
			}
			
			List<String> roles = new ArrayList<String>();
			roles.add("user");
			
			dataAuth = new ApauthData();
			dataAuth.id = UUIDGenerator.nextId();
			dataAuth.username = userBean.username;
			dataAuth.password = userBean.password;
			dataAuth.entityId = UUIDGenerator.nextId();
			dataAuth.type = "user";
			dataAuth.roles = roles;
			dataAuth.registered = true;
			dataAuth.active = true;
			ApauthCollection.create(dataAuth);
			
			UserData dataEntity = new UserData();
			dataEntity.id = dataAuth.entityId;
			dataEntity.authId = dataAuth.id;
			UserCollection.create(dataEntity);
			
			return Response.status(Status.CREATED).build();
			
		} catch (MongoWriteException e) {
			return Response.status(Status.FORBIDDEN).build();
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@GET
	@Path("/{id}")
	@Produces({MediaType.APPLICATION_JSON})
	public Response getUser(@Context SecurityContext sc, @PathParam("id") final String id) {
		try {
			Document document = Mongo.get().collection("user").find(and(eq("id", id))).first();
			if(document == null) {
				return Response.status(Status.NOT_FOUND).build();
			}
			UserBean bean = new UserBean();
			bean.id = document.getString("id");
			bean.username = document.getString("username");
			bean.password = document.getString("password");
			return Response.status(Status.OK).entity(bean).build();
			
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@PUT
	@Path("/{id}")
	@Consumes({MediaType.APPLICATION_JSON})
	public Response putUser(@Context SecurityContext sc, @PathParam("id") final String id, UserBean userBean) {
		try {
			Document document = new Document();
			if(userBean.id != null)
				document.append("id", userBean.id);
			if(userBean.username != null)
				document.append("username", userBean.username);
			if(userBean.password != null)
				document.append("password", userBean.password);
			Document result = Mongo.get().collection("user").findOneAndUpdate(and(eq("id", id)), new Document("$set", document));
			if(result == null)
				return Response.status(Status.NOT_FOUND).build();
			return Response.status(Status.OK).build();
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@DELETE
	@Path("/{id}")
	public Response deleteUser(@Context SecurityContext sc, @PathParam("id") final String id) {
		try {
			if (UserCollection.deleteById(id)) {
			return Response.status(Status.OK).build();
			}
				return Response.status(Status.NOT_FOUND).build();
			
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@GET
	@Path("/{user}/runes")
	@Produces({MediaType.APPLICATION_JSON})
	public Response getUserRunes(@Context SecurityContext sc, @PathParam("user") final String user) {
		try {
			FindIterable<Document> documents = Mongo.get().collection("rune").find(and(eq("user", user)));
			List<RuneBean> beanList = new ArrayList<RuneBean>();
			for (Document document: documents){
				RuneBean bean = new RuneBean();
				bean.lvl = document.getInteger("lvl");
				bean.set = document.getString("set");
				bean.stat4Type = document.getString("stat4Type");
				bean.star = document.getInteger("star");
				bean.stat2Type = document.getString("stat2Type");
				bean.statSub = document.getInteger("statSub");
				bean.statMain = document.getInteger("statMain");
				bean.stat4 = document.getInteger("stat4");
				bean.monster = document.getString("monster");
				bean.stat3Type = document.getString("stat3Type");
				bean.stat2 = document.getInteger("stat2");
				bean.pos = document.getString("pos");
				bean.stat3 = document.getInteger("stat3");
				bean.statSubType = document.getString("statSubType");
				bean.stat1 = document.getInteger("stat1");
				bean.name = document.getString("name");
				bean.stat1Type = document.getString("stat1Type");
				bean.statMainType = document.getString("statMainType");
				bean.id = document.getString("id");
				bean.user = document.getString("user");
				beanList.add(bean);
			}
			return Response.status(Status.OK).entity(beanList.toArray(new RuneBean[beanList.size()])).build();
			
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@GET
	@Path("/{user}/monsters")
	@Produces({MediaType.APPLICATION_JSON})
	public Response getUserMonsters(@Context SecurityContext sc, @PathParam("user") final String user) {
		try {
			FindIterable<Document> documents = Mongo.get().collection("monster").find(and(eq("user", user)));
			List<MonsterBean> beanList = new ArrayList<MonsterBean>();
			for (Document document: documents){
				MonsterBean bean = new MonsterBean();
				bean.acc = document.getInteger("acc");
				bean.res = document.getInteger("res");
				bean.lvl = document.getInteger("lvl");
				bean.role = document.getString("role");
				bean.star = document.getInteger("star");
				bean.isAwaked = document.getBoolean("isAwaked");
				bean.def = document.getInteger("def");
				bean.spd = document.getInteger("spd");
				bean.hp = document.getInteger("hp");
				bean.crate = document.getInteger("crate");
				bean.elemType = document.getString("elemType");
				bean.cdmg = document.getInteger("cdmg");
				bean.name = document.getString("name");
				bean.xp = document.getInteger("xp");
				bean.atk = document.getInteger("atk");
				bean.id = document.getString("id");
				bean.user = document.getString("user");
				beanList.add(bean);
			}
			return Response.status(Status.OK).entity(beanList.toArray(new MonsterBean[beanList.size()])).build();
			
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

}
