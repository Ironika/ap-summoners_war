package org.ap.summonerwar.rest.servlet;

import javax.ws.rs.*;
import javax.ws.rs.core.*;
import javax.ws.rs.core.Response.*;
import org.ap.web.rest.servlet.APServletBase;
import org.ap.summonerwar.bean.BuildResultBean;
import org.ap.summonerwar.storage.BuildResultData;
import org.ap.summonerwar.storage.BuildResultCollection;
import org.ap.web.internal.APWebException;
import java.util.List;
import java.util.ArrayList;
import javax.annotation.security.RolesAllowed;
import org.ap.web.internal.UUIDGenerator;
import com.mongodb.MongoWriteException;

/* This class was auto-generated by the JavaWriter */
@Path("/buildresult")
public class BuildResultServlet extends APServletBase {

	public static final String PATH = "/buildresult";

	@GET
	@Produces({MediaType.APPLICATION_JSON})
	@RolesAllowed("user")
	public Response getBuildresults(@Context SecurityContext sc) {
		try {
			List<BuildResultData> datas = BuildResultCollection.getAll();
			
			List<BuildResultBean> beanList = new ArrayList<BuildResultBean>();
			for (BuildResultData data : datas) {
				BuildResultBean bean = new BuildResultBean();
				bean.buildId = data.getBuildId();
				bean.userId = data.getUserId();
				bean.eval = data.getEval();
				bean.id = data.getId();
				
				beanList.add(bean);
			}
			
			return Response.status(Status.OK).entity(beanList.toArray(new BuildResultBean[beanList.size()])).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@POST
	@Consumes({MediaType.APPLICATION_JSON})
	@RolesAllowed("user")
	public Response postBuildresult(@Context SecurityContext sc, BuildResultBean buildResultBean) {
		try {
			BuildResultData data = new BuildResultData();
			data.setId(UUIDGenerator.nextId());
			data.setBuildId(buildResultBean.buildId);
			data.setUserId(buildResultBean.userId);
			data.setEval(buildResultBean.eval);
			BuildResultCollection.create(data);
			return Response.status(Status.CREATED).entity("{\"id\": \"" + data.id + "\"}").build();
			
		} catch (MongoWriteException e) {
			return Response.status(Status.FORBIDDEN).build();
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@GET
	@Path("/{buildResultId}")
	@Produces({MediaType.APPLICATION_JSON})
	@RolesAllowed("user")
	public Response getBuildresult(@Context SecurityContext sc, @PathParam("buildResultId") final String buildResultId) {
		try {
			BuildResultData data = BuildResultCollection.getById(buildResultId);
			if(data == null) {
				return Response.status(Status.NOT_FOUND).build();
			}
			BuildResultBean bean = new BuildResultBean();
			bean.buildId = data.getBuildId();
			bean.userId = data.getUserId();
			bean.eval = data.getEval();
			bean.id = data.getId();
			
			return Response.status(Status.OK).entity(bean).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@PUT
	@Path("/{buildResultId}")
	@Consumes({MediaType.APPLICATION_JSON})
	@RolesAllowed("user")
	public Response putBuildresult(@Context SecurityContext sc, @PathParam("buildResultId") final String buildResultId, BuildResultBean buildResultBean) {
		try {
			// Get actual data object
			BuildResultData data = BuildResultCollection.getById(buildResultId);
			// Check data exists
			if (data == null) {
				throw new APWebException("buildResult not found", "AP_BUILDRESULT_NOTFOUND", Status.BAD_REQUEST);
			}
			// Update the data object
			data.setBuildId(buildResultBean.buildId);
			data.setUserId(buildResultBean.userId);
			data.setEval(buildResultBean.eval);
			// Store the updated data object
			BuildResultCollection.updateNull(data);
			// Send the response
			return Response.status(Status.OK).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@DELETE
	@Path("/{buildResultId}")
	@RolesAllowed("user")
	public Response deleteBuildresult(@Context SecurityContext sc, @PathParam("buildResultId") final String buildResultId) {
		try {
			// Try to delete the entity
			if (!BuildResultCollection.deleteById(buildResultId)) {
				throw new APWebException("buildResult not found", "AP_BUILDRESULT_NOTFOUND", Status.BAD_REQUEST);
			}
			// Send the response
			return Response.status(Status.OK).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

}
