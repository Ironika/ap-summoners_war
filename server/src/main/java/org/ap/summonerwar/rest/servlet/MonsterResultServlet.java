package org.ap.summonerwar.rest.servlet;

import javax.ws.rs.*;
import javax.ws.rs.core.*;
import javax.ws.rs.core.Response.*;
import org.ap.web.rest.servlet.APServletBase;
import org.ap.summonerwar.bean.MonsterResultBean;
import org.ap.summonerwar.storage.MonsterResultData;
import org.ap.summonerwar.storage.MonsterResultCollection;
import org.ap.web.internal.APWebException;
import java.util.List;
import java.util.ArrayList;
import javax.annotation.security.RolesAllowed;
import org.ap.web.internal.UUIDGenerator;
import com.mongodb.MongoWriteException;

/* This class was auto-generated by the JavaWriter */
@Path("/monsterresult")
public class MonsterResultServlet extends APServletBase {

	public static final String PATH = "/monsterresult";

	@GET
	@Produces({MediaType.APPLICATION_JSON})
	@RolesAllowed("user")
	public Response getMonsterresults(@Context SecurityContext sc) {
		try {
			List<MonsterResultData> datas = MonsterResultCollection.getAll();
			
			List<MonsterResultBean> beanList = new ArrayList<MonsterResultBean>();
			for (MonsterResultData data : datas) {
				MonsterResultBean bean = new MonsterResultBean();
				bean.rune6 = data.getRune6();
				bean.buildResultId = data.getBuildResultId();
				bean.rune3 = data.getRune3();
				bean.rune2 = data.getRune2();
				bean.rune5 = data.getRune5();
				bean.rune4 = data.getRune4();
				bean.rune1 = data.getRune1();
				bean.userId = data.getUserId();
				bean.monsterConfigId = data.getMonsterConfigId();
				bean.acc = data.getAcc();
				bean.res = data.getRes();
				bean.def = data.getDef();
				bean.cdmg = data.getCdmg();
				bean.spd = data.getSpd();
				bean.hp = data.getHp();
				bean.atk = data.getAtk();
				bean.crate = data.getCrate();
				bean.id = data.getId();
				
				beanList.add(bean);
			}
			
			return Response.status(Status.OK).entity(beanList.toArray(new MonsterResultBean[beanList.size()])).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@POST
	@Consumes({MediaType.APPLICATION_JSON})
	@RolesAllowed("user")
	public Response postMonsterresult(@Context SecurityContext sc, MonsterResultBean monsterResultBean) {
		try {
			MonsterResultData data = new MonsterResultData();
			data.setId(UUIDGenerator.nextId());
			data.setRune6(monsterResultBean.rune6);
			data.setBuildResultId(monsterResultBean.buildResultId);
			data.setRune3(monsterResultBean.rune3);
			data.setRune2(monsterResultBean.rune2);
			data.setRune5(monsterResultBean.rune5);
			data.setRune4(monsterResultBean.rune4);
			data.setRune1(monsterResultBean.rune1);
			data.setUserId(monsterResultBean.userId);
			data.setMonsterConfigId(monsterResultBean.monsterConfigId);
			data.setAcc(monsterResultBean.acc);
			data.setRes(monsterResultBean.res);
			data.setDef(monsterResultBean.def);
			data.setCdmg(monsterResultBean.cdmg);
			data.setSpd(monsterResultBean.spd);
			data.setHp(monsterResultBean.hp);
			data.setAtk(monsterResultBean.atk);
			data.setCrate(monsterResultBean.crate);
			MonsterResultCollection.create(data);
			return Response.status(Status.CREATED).entity("{\"id\": \"" + data.id + "\"}").build();
			
		} catch (MongoWriteException e) {
			return Response.status(Status.FORBIDDEN).build();
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@GET
	@Path("/{monsterResultId}")
	@Produces({MediaType.APPLICATION_JSON})
	@RolesAllowed("user")
	public Response getMonsterresult(@Context SecurityContext sc, @PathParam("monsterResultId") final String monsterResultId) {
		try {
			MonsterResultData data = MonsterResultCollection.getById(monsterResultId);
			if(data == null) {
				return Response.status(Status.NOT_FOUND).build();
			}
			MonsterResultBean bean = new MonsterResultBean();
			bean.rune6 = data.getRune6();
			bean.buildResultId = data.getBuildResultId();
			bean.rune3 = data.getRune3();
			bean.rune2 = data.getRune2();
			bean.rune5 = data.getRune5();
			bean.rune4 = data.getRune4();
			bean.rune1 = data.getRune1();
			bean.userId = data.getUserId();
			bean.monsterConfigId = data.getMonsterConfigId();
			bean.acc = data.getAcc();
			bean.res = data.getRes();
			bean.def = data.getDef();
			bean.cdmg = data.getCdmg();
			bean.spd = data.getSpd();
			bean.hp = data.getHp();
			bean.atk = data.getAtk();
			bean.crate = data.getCrate();
			bean.id = data.getId();
			
			return Response.status(Status.OK).entity(bean).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@PUT
	@Path("/{monsterResultId}")
	@Consumes({MediaType.APPLICATION_JSON})
	@RolesAllowed("user")
	public Response putMonsterresult(@Context SecurityContext sc, @PathParam("monsterResultId") final String monsterResultId, MonsterResultBean monsterResultBean) {
		try {
			// Get actual data object
			MonsterResultData data = MonsterResultCollection.getById(monsterResultId);
			// Check data exists
			if (data == null) {
				throw new APWebException("monsterResult not found", "AP_MONSTERRESULT_NOTFOUND", Status.BAD_REQUEST);
			}
			// Update the data object
			data.setRune6(monsterResultBean.rune6);
			data.setBuildResultId(monsterResultBean.buildResultId);
			data.setRune3(monsterResultBean.rune3);
			data.setRune2(monsterResultBean.rune2);
			data.setRune5(monsterResultBean.rune5);
			data.setRune4(monsterResultBean.rune4);
			data.setRune1(monsterResultBean.rune1);
			data.setUserId(monsterResultBean.userId);
			data.setMonsterConfigId(monsterResultBean.monsterConfigId);
			data.setAcc(monsterResultBean.acc);
			data.setRes(monsterResultBean.res);
			data.setDef(monsterResultBean.def);
			data.setCdmg(monsterResultBean.cdmg);
			data.setSpd(monsterResultBean.spd);
			data.setHp(monsterResultBean.hp);
			data.setAtk(monsterResultBean.atk);
			data.setCrate(monsterResultBean.crate);
			// Store the updated data object
			MonsterResultCollection.updateNull(data);
			// Send the response
			return Response.status(Status.OK).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

	@DELETE
	@Path("/{monsterResultId}")
	@RolesAllowed("user")
	public Response deleteMonsterresult(@Context SecurityContext sc, @PathParam("monsterResultId") final String monsterResultId) {
		try {
			// Try to delete the entity
			if (!MonsterResultCollection.deleteById(monsterResultId)) {
				throw new APWebException("monsterResult not found", "AP_MONSTERRESULT_NOTFOUND", Status.BAD_REQUEST);
			}
			// Send the response
			return Response.status(Status.OK).build();
			
		} catch (APWebException e) {
			return sendException(e);
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		}
	}

}
